#!/usr/bin/env python
# HEAD motion
# 0: lower="-1.22173" upper="1.22173" effort="100" velocity="1.0"
# 1: lower="-0.401425" upper="1.308997" effort="100" velocity="1.0"

from trajectory_msgs.msg import JointTrajectoryPoint, JointTrajectory
import numpy as np
import rospy
import time
import sys

class RightArm:

    def __init__(self, joint):
        self.pub = rospy.Publisher("/head_controller/command", JointTrajectory, queue_size=1)
        self.names = [u'HEAD_JOINT0', u'HEAD_JOINT1']
        self.head_limits = [(-1.2, 1.2),
                            (-0.39, 1.29)]
        self.joint_num = int(joint[1])

    def range_tester(self):
        initpos = np.zeros(2)
        lower = np.zeros(2)
        upper = np.zeros(2)
        lower[self.joint_num] = self.head_limits[self.joint_num][0]
        upper[self.joint_num] = self.head_limits[self.joint_num][1]

        pos = [lower, upper, initpos]
        timing = [3.0, 9.0, 12.0]
        trajectory_time = timing[len(timing)-1]

        trajectory_message = JointTrajectory()
        trajectory_message.joint_names = [x.encode('ascii') for x in self.names]
        for i in range(0, len(pos)):
            point = JointTrajectoryPoint()
            point.velocities = np.zeros(2).tolist()
            point.positions = pos[i].tolist()
            point.time_from_start = rospy.Duration(timing[i])
            trajectory_message.points.append(point)

        trajectory_message.header.stamp = rospy.Time.now()
        print("Moving through joint limit range of HEAD_JOINT" + str(self.joint_num))
        # print(trajectory_message)
        time.sleep(2)
        self.pub.publish(trajectory_message)


def main(args):
    rospy.init_node("right_arm_motion_tester")
    rarm = RightArm(args)
    rarm.range_tester()

if __name__ == '__main__':
    main(sys.argv)